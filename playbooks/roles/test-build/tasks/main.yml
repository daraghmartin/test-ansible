#- name: Create an ubuntu instance on Amazon EC2
#  local_action:
#    module: ec2
#    image: "{{ default_image }}"
#    region: "{{ region }}"
#    instance_type: "{{ default_image_size }}"
#    key_name: "{{ key }}"
#    group: [web]
#    instance_tags: { Name: ansibletest, type: web, env: production }
#
- name: create a vpc
  local_action:
      module: ec2_vpc
      region: "{{ region }}"
      internet_gateway: True
      resource_tags: { Name: test, env: test }
      cidr_block: "{{ cidr_lhs }}.0.0/16"
      subnets:
        - cidr: "{{ cidr_lhs }}.0.0/24"
          az: eu-west-1a
          resource_tags:
            env: test
            tier: webA
        - cidr: "{{ cidr_lhs }}.1.0/24"
          az: eu-west-1b
          resource_tags:
            env: test
            tier: webB
        - cidr: "{{ cidr_lhs }}.2.0/24"
          az: eu-west-1c
          resource_tags:
            env: test
            tier: webC
      route_tables:
        - subnets:
          - "{{ cidr_lhs }}.0.0/24"
          - "{{ cidr_lhs }}.1.0/24"
          - "{{ cidr_lhs }}.2.0/24"
          routes:
          - dest: 0.0.0.0/0
            gw: igw
  register: vpc

- debug: var=vpc

- name: Write out a temporary file for mapping subnet to id
  template: src=templates/subnet_id.j2 dest=/tmp/subnet_id

- name: Get the contents of subnet mapping file and set it as a fact
  set_fact:
    subnet_maps: "{{ lookup('file', '/tmp/subnet_id') }}"

- set_fact: vpc_id={{ vpc.vpc_id }}

- name: web security group
  local_action:
    module: ec2_group
    name: vpc-web
    region: "{{ region }}"
    description: allow http and https access
    vpc_id: "{{ vpc_id }}"
    rules:
    - proto: tcp
      from_port: 80
      to_port: 80
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      from_port: 443
      to_port: 443
      cidr_ip: 0.0.0.0/0

- name: ssh security group
  local_action:
    module: ec2_group  
    name: vpc-ssh
    region: "{{ region }}"
    description: allow ssh access
    vpc_id: "{{ vpc_id }}"
    rules:
    - proto: tcp
      from_port: 22
      to_port: 22
      cidr_ip: 0.0.0.0/0

#- name: outbound security group
#  ec2_group:
#name: vpc-outbound
#description: allow outbound connections to the internet
#region: "{{ region }}"
#vpc_id: "{{ vpc_id }}"
#rules_egress:
#- proto: all
#  cidr_ip: 0.0.0.0/0

- name: Create nats
  local_action:
    module: ec2
    image: "{{ default_image }}"
    region: "{{ region }}"
    instance_type: "{{ default_image_size }}"
    key_name: "{{ key }}"
    group: [vpc-web, vpc-ssh]
    instance_tags: { Name: ansibletest, type: web, env: production }
    vpc_subnet_id: "{{ vpc.subnets[item.id].id}}"
    wait: true
    instance_tags: 
      Name: "{{ environ|default('dev') + '_' + item.name }}"
    exact_count: 1
    count_tag: 
      Name: "{{ environ|default('dev') }}_{{item.name}}"
    assign_public_ip: True
  with_items:
    - { name: 'natA', id: 0 }
    - { name: 'natB', id: 1 }
    - { name: 'natC', id: 2 }
  register: nat

- debug: var=nat
