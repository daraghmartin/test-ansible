- name: create a vpc
  local_action:
    module: ec2_vpc
    region: "{{ region }}"
    internet_gateway: True
    resource_tags: { Name: test, env: test }
    cidr_block: "{{ cidr_lhs }}.0.0/16"
  register: vpc

#- debug: var=vpc

- set_fact: vpc_id={{ vpc.vpc_id }}

#TODO: module for subnets
- name: nat subnets
  local_action:
    module: ec2_vpc_subnet
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    cidr: "{{ cidr_lhs }}.{{ item.subnet }}.0/24"
    az: "{{ region }}{{ item.az }}"
    resource_tags:
      env: "{{ env }}"
      name: "nat{{ item.az }}"
      tier: "nat"
  with_items:
    - { az: "a", subnet: "0" }
    - { az: "b", subnet: "1" }
    - { az: "c", subnet: "2" }
  register: nat_subnets

#- debug: var=nat_subnets

- name: web subnets
  local_action:
    module: ec2_vpc_subnet
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    cidr: "{{ cidr_lhs }}.{{ item.subnet }}.0/24"
    az: "{{ region }}{{ item.az }}"
    resource_tags:
      env: "{{ env }}"
      name: "web{{ item.az }}"
      tier: "web"
  with_items:
    - { az: "a", subnet: "3" }
    - { az: "b", subnet: "4" }
    - { az: "c", subnet: "5" }
  register: web_subnets

- name: mongo subnets
  local_action:
    module: ec2_vpc_subnet
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    cidr: "{{ cidr_lhs }}.{{ item.subnet }}.0/24"
    az: "{{ region }}{{ item.az }}"
    resource_tags:
      env: "{{ env }}"
      name: "mongo{{ item.az }}"
      tier: "db"
  with_items:
    - { az: "a", subnet: "6" }
    - { az: "b", subnet: "7" }
    - { az: "c", subnet: "8" }
  register: mongo_subnets

- name: internet gateway
  local_action:
    module: ec2_vpc_igw
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
  register: igw

- name: nat internet route table
  local_action:
    module: ec2_vpc_route_table
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    #TODO: base this on lookup
    subnets:
      - "{{ cidr_lhs }}.0.0/24"
      - "{{ cidr_lhs }}.1.0/24"
      - "{{ cidr_lhs }}.2.0/24"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
  register: nat_route_table

#- name: Write out a temporary file for mapping subnet to id
#  template: src=templates/subnet_id.j2 dest=/tmp/subnet_id

#- name: Get the contents of subnet mapping file and set it as a fact
#  set_fact:
#    subnet_maps: "{{ lookup('file', '/tmp/subnet_id') }}"

- name: web security group
  local_action:
    module: ec2_group
    name: vpc-web
    region: "{{ region }}"
    description: allow http and https access
    vpc_id: "{{ vpc_id }}"
    rules:
    - proto: tcp
      from_port: 80
      to_port: 80
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      from_port: 443
      to_port: 443
      cidr_ip: 0.0.0.0/0
  register: web_sg

#- debug: var=web_sg

- name: ssh security group
  local_action:
    module: ec2_group  
    name: vpc-ssh
    region: "{{ region }}"
    description: allow ssh access
    vpc_id: "{{ vpc_id }}"
    rules:
    - proto: tcp
      from_port: 22
      to_port: 22
      cidr_ip: 0.0.0.0/0
  register: ssh_sg

#- debug: var=nat_subnets.results[0].subnet.id

- name: Create nats
  local_action:
    module: ec2
    image: "{{ default_image }}"
    region: "{{ region }}"
    instance_type: "{{ default_image_size }}"
    key_name: "{{ key }}"
    group: [vpc-web, vpc-ssh]
    instance_tags: { Name: ansibletest, type: nat, env: "{{ env }}" }
    vpc_subnet_id: "{{ nat_subnets.results[item.id].subnet.id}}"
    source_dest_check: False
    wait: true
    instance_tags: 
      Name: "{{ environ|default('dev') + '_' + item.name }}"
    exact_count: 1
    count_tag: 
      Name: "{{ environ|default('dev') }}_{{item.name}}"
    assign_public_ip: True
    user_data: |
      {{ lookup('template', 'templates/nat_user_data.j2') }}
  with_items:
    - { name: 'natA', id: 0 }
    - { name: 'natB', id: 1 }
    - { name: 'natC', id: 2 }
  register: nats

#- debug: var=nats

#- debug: var=nats.results[0].tagged_instances[0].id
#- debug: var=nats.results[1].tagged_instances[0].id

#for the moment use one nat
- name: Set up NAT-protected route table A
  local_action:
    module: ec2_vpc_route_table
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    resource_tags: { Name: test, env: "{{env}}" }
    subnets:
      - "{{ cidr_lhs }}.3.0/24"
      - "{{ cidr_lhs }}.4.0/24"
      - "{{ cidr_lhs }}.5.0/24"
      - "{{ cidr_lhs }}.6.0/24"
      - "{{ cidr_lhs }}.7.0/24"
      - "{{ cidr_lhs }}.8.0/24"
    routes:
      - dest: 0.0.0.0/0
        instance_id: "{{ nats.results[0].tagged_instances[0].id }}"
  register: int_route_table

#TODO: SGs
- name: Create mongos
  local_action:
    module: ec2
    image: "{{ default_image }}"
    region: "{{ region }}"
    instance_type: "{{ default_image_size }}"
    key_name: "{{ key }}"
    group: [vpc-web, vpc-ssh]
    instance_tags: { Name: ansibletest, type: mongo, env: "{{ env }}" }
    vpc_subnet_id: "{{ mongo_subnets.results[item.id].subnet.id}}"
    private_ip: "{{ cidr_lhs }}.{{ item.subnet_id }}.20"
    #source_dest_check: False
    wait: true
    instance_tags: 
      Name: "{{ environ|default('dev') + '_' + item.name }}"
    exact_count: 1
    count_tag: 
      Name: "{{ environ|default('dev') }}_{{item.name}}"
    assign_public_ip: True
    user_data: |
      {{ lookup('template', 'templates/nat_user_data.j2') }}
  with_items:
    - { name: 'mongoA', id: 0, subnet: 6 }
    - { name: 'mongoB', id: 1, subnet: 7 }
    - { name: 'mongoC', id: 2, subnet: 8 }
  register: mongos


#- debug: var=web_sg.group_id
#- name:
#  local_action:
#    module: ec2_eni
#    instance_id: "{{ mongos.results[item.id].tagged_instances[0].id }}"
#    device_index: 1
#    private_ip_address: "{{ cidr_lhs }}.{{ item.subnet_id }}.20"
#    subnet_id: "{{ mongo_subnets.results[item.id].subnet.id}}"
#    state: present
#  with_items:
#    - { id: 0, subnet: 6}
#    - { id: 1, subnet: 7}
#    - { id: 2, subnet: 8}
#  register: mongo_enis

- name: web launch config
  local_action:
    module: ec2_lc
    name: web_lc
    region: "{{ region }}"
    image_id: "{{ default_image }}"
    key_name: "{{ key }}"
    security_groups: 
      - "{{ web_sg.group_id }}" 
      - "{{ ssh_sg.group_id }}"
    instance_type: "{{ default_image_size }}"
    volumes:
    - device_name: /dev/sda1
      volume_size: 100
      device_type: io1
      delete_on_termination: true
      iops: 3000
  register: web_lc

- name: web asg
  local_action:
    module: ec2_asg
    name: web_asg
    launch_config_name: web_lc
    health_check_period: 60
    health_check_type: ELB
    replace_all_instances: yes
    tags:
      - Name: "webxx"
    min_size: 3
    max_size: 3
    desired_capacity: 3
    region: "{{ region }}"
    vpc_zone_identifier: [ "{{web_subnets.results[0].subnet.id}}","{{web_subnets.results[1].subnet.id}}","{{web_subnets.results[2].subnet.id}}" ]
  register: web_asg

#ELB

